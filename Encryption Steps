


MY NOTES: 
What is Asymmetric and Symmetric Encryption?
Symmetric = same key can decrypt and encrypt
Asymmetric = one key to decrypt and one to encrypt, usually a key pairing of a public key and a private key
Hybrid Encryption = Asymmetric to facilitate a key exchange, Secret Key used with Symmetric Encryption for Bulk Data

Examples:
Jim wants to send a message to Pam, Jim can encrypt his message with Pam's public key and since she has the private key she is the only one that can decrypt it  
To prove you were the one that sent a certain thing, you can use your private key to encrypt it so that others can use your own public key to decrypt it, proving it was you. In doing this it also proves that the message was not messed with in transit because if it was, using the public key would get you a mess compared to the original message ‘
Pam generates a Symmetric Secret Key which she encrypts with Jim’s public key, meaning the only key in the world that can decrypt it would be Jim’s private key, Pam can send it over to Jim to decrypt meaning they both now have Symmetric Keys they can use, combining both Symmetric and Asymmetric Encryption. This is Hybrid Encryption

Hybrid Encryption is where the sender generates a symmetric key that they use to encrypt their message and sends over said other key but encrypts it with the receivers public key so they can decrypt it with their private key and get the same key that they can encrypt and decrypt messages with 
Steps for Full Hybrid Encryption: (different from regular way)
For this type of encryption both sides have their own key pairs adn they exchange their public keys where they use ECDH to generate the same shared secret symmetric key
1. Key exchange
## EC stands for Eliptic Curve and this is used to make keys, gives a key generator that uses Eliptic Curve math
KeyPairGenerator kpg = KeyPairGenerator.getInstance(“EC”)

## secp256r1 is a specific curve that is part of EC to make keys
kpg.initialize(new ECGenParamterSpec(“secp256r1”));

## This is used to actually make the key pair itself where one is private and one is public
KeyPair myKeyPair = kpg.generateKeyPair();

## ECDH makes it so that two devices can create a secret key together without having to use the internet, so this gives the methods that can help perform the ECDH key agreement
KeyAgreement ka = KeyAgreement.getInstance(“ECDH”)

## basically loads your private key into the tool so that you can agree on a shared secret key
ka.init(myKeyPair.getPrivate())

## Uses other persons public key to get the shared secret (combines your private and their public and vice versa)
ka.doPhase(theirPublicKey, true);

## generates secret shared key between the two people
byte[] sharedSecret = ka.generateSecret();




2. Symmetric Key Derivation
Symmetric Key derivation is the process of turning shared secret data into a symmetric key that both sides can use for encryption and decryption; this basically creates a key from the shared secret key that is good quality for encryption and decryption
## gets a tool that can make a SHA-256 hash which turns input into a 256 bit fixed string of data
MessageDigest sha256 = MessageDigest.getInstance(“SHA-256”);

## turns the shared key into a hashed key, making sure the key looks random so that the key can't be guessed or predicted and is the right size so that encryption algorithms like AES can work well on it
byte[] hashedKey = sha256.digest(sharedSecret)

## Take the first 16 bytes from said hashed key as AES uses 16 bytes
byte[] AESKetBytes = Arrays.copyOf(hashedKey,16)

## basically makes the key object an AES key so that the encryption tool knows its an AES key
SecretKeySpec AESKey = new SecretKeySpec(AESKeyBytes, “AES”)

3. AES Encryption
## This would get a cipher tool that uses AES encryption with GCM mode. GCM stands for Galois/Counter Mode; way of using AES that brings about Confidentiality and Authentication because GCM encrypts and checks for integrity
Cipher cipher = Cipher.getInstance(“AES/GCM/NoPadding”);

## This would create a key object from the raw AES key made earlier so that the AES cipher can actually use it 
SecretKeySpec keySpec = newSecretKeySpec(key, “AES”)

## This sets up the parameters for GCM mode which includes a 128-bit authentication tag and the initialization vector. Tag is added to message to show that nothing was tampered with and the initialization vector ensures the encryption result is unique 
GCMParameterSpec gcmSPEC = new GCMParameterSpec(128, iv)

## gets your cipher object and gets it ready for encryption using the key and settings given to it. (steps before) Encrypt_MODE tells it it is encrypting, keySpec is the key object you created and gcmSpec is the settings you used which are the authentication tag and the Initialization Vector
cipher.init(Cipher.Encrypt_MODE, keySpec, gcmSpec);

## Encrypt the plaintext string and return the ciphertext bytes . plaintext.getBytes turns the message into raw bytes then cipher.doFinal runs them through the AES encryption, scrambling them with your AES key and the IV
return cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));



3. AES Encryption
## This would get a cipher tool that uses AES encryption with GCM mode. GCM stands for Galois/Counter Mode; way of using AES that brings about Confidentiality and Authentication because GCM encrypts and checks for integrity
Cipher cipher = Cipher.getInstance(“AES/GCM/NoPadding”);

## This would create a key object from the raw AES key made earlier so that the AES cipher can actually use it 
SecretKeySpec keySpec = newSecretKeySpec(key, “AES”)

## This sets up the parameters for GCM mode which includes a 128-bit authentication tag and the initialization vector. Tag is added to message to show that nothing was tampered with and the initialization vector ensures the encryption result is unique 
GCMParameterSpec gcmSPEC = new GCMParameterSpec(128, iv)

## gets your cipher object and gets it ready for encryption using the key and settings given to it. (steps before) Encrypt_MODE tells it it is encrypting, keySpec is the key object you created and gcmSpec is the settings you used which are the authentication tag and the Initialization Vector
cipher.init(Cipher.Encrypt_MODE, keySpec, gcmSpec);

## Encrypt the plaintext string and return the ciphertext bytes . plaintext.getBytes turns the message into raw bytes then cipher.doFinal runs them through the AES encryption, scrambling them with your AES key and the IV
return cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));



3. AES Decryption
## gets a tool that uses AES decryption with GCM mode 
Cipher cipher = Cipher.getInstance(“AES/GCM/NoPadding)

## uses the raw AES shared bytes you created and creates a key from it
SecretKeySpec keySpec = newSecretKeySpec(key, “AES)

## sets parameters in the GCM mode like we did for the Encrypting
GCMParamterSpec gcmSpec = new GCMParameterSpec(128, iv)

## puts the cipher into decrypt mode with the key given and the settings that you set up
cipher.init(Cipher.DECRYPT_MODE, keySpec, gcmSpec)

## this decrypts the ciphertext bytes back into plain text bytes
byte[] decrypted = cipher.doFinal(ciphertext);

## turn said bytes into a string that you are able to read then return it
return new String(decrypted, StandardCharsets.UTF_8);


